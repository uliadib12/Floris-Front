class o{products=[];constructor(t){this.products=t}getTotalPrice(){let t=0;return this.products.forEach(r=>{t+=r.price*r.quantity}),t}getTotalItems(){let t=0;return this.products.forEach(r=>{t+=r.quantity}),t}static EmptyCart(){return new o([])}}class i{static getCartFromStorage(){const t=localStorage.getItem("cart");if(t){const r=JSON.parse(t);return new o(r.products)}return null}static saveCartToStorage(t){localStorage.setItem("cart",JSON.stringify(t))}static clearCartFromStorage(){localStorage.removeItem("cart")}static addProductToCart(t){if(this.isProductInCart(t))return;const r=this.getCartFromStorage();if(r)r.products.push(t),this.saveCartToStorage(r);else{const a=o.EmptyCart();a.products.push(t),this.saveCartToStorage(a)}}static updateProductInCart(t){const r=this.getCartFromStorage();if(r){const a=r.products.find(e=>e.id===t.id&&e.variantIndex===t.variantIndex);a&&(a.additionalInformation=t.additionalInformation,a.quantity=t.quantity,this.saveCartToStorage(r))}}static removeProductFromCart(t){const r=this.getCartFromStorage();if(r){const a=r.products.findIndex(e=>e.id===t);a!==-1&&(r.products.splice(a,1),this.saveCartToStorage(r))}}static isProductInCart(t){const r=this.getCartFromStorage();return!!(r&&r.products.find(e=>e.id===t.id&&e.variantIndex===t.variantIndex))}}export{i as C,o as a};
